public class Solution {
    int index;
    String Serialize(TreeNode root) {
        if(root==null) return "#|";
            return root.val+"|"+Serialize(root.left)+"|"+Serialize(root.right)+"|";
  }
    TreeNode Deserialize(String str) {
       index = 0;
       return parse(str);
  }
    TreeNode parse(String str) {
        String temp = "";
        while(str.charAt(index)=='|')index++;
       while(str.charAt(index)!='|'&&index<str.length()-1)temp+=str.charAt(index++);
        if(temp.charAt(0)=='#'||temp.isEmpty())return null;
        int a = Integer.parseInt(temp);
        TreeNode temptree = new TreeNode(a);
        temptree.left =parse(str);
        temptree.right =parse(str);
        return temptree;
  }
}//错误代码








public class Solution {
    int index;
    String Serialize(TreeNode root) {
        if(root==null) return "#|";
            return root.val+"|"+Serialize(root.left)+Serialize(root.right);
  }
    TreeNode Deserialize(String str) {
       index = 0;
       return parse(str);
  }
    TreeNode parse(String str) {
        String temp = "";
        while(str.charAt(index)=='|')index++;
       while(str.charAt(index)!='|'&&index<str.length()-1)temp+=str.charAt(index++);
        if(temp.charAt(0)=='#'||temp.isEmpty())return null;
        int a = Integer.parseInt(temp);
        TreeNode temptree = new TreeNode(a);
        temptree.left =parse(str);
        temptree.right =parse(str);
        return temptree;
  }
}//正确的




public class Solution {
    int index;
    String Serialize(TreeNode root) {
        if(root==null) return "#";
            return root.val+"|"+Serialize(root.left)+"|"+Serialize(root.right)+"|";
  }
    TreeNode Deserialize(String str) {
       index = 0;
       return parse(str);
  }
    TreeNode parse(String str) {
        String temp = "";
        while(str.charAt(index)=='|')index++;
       while(index<=str.length()-1&&str.charAt(index)!='|')temp+=str.charAt(index++);
        if(temp.charAt(0)=='#'||temp.isEmpty())return null;
        int a = Integer.parseInt(temp);
        TreeNode temptree = new TreeNode(a);
        temptree.left =parse(str);
        temptree.right =parse(str);
        return temptree;
  }
}//正确版本2