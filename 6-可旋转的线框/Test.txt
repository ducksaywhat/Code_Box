#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>
#include <iostream>
#include<fstream>
#include <windows.h>
#include <math.h>
using namespace std;

const int Width=  800;
const int Height=  600;
typedef unsigned int IUINT32;

typedef struct { float x, y, z ,w; } vector_t;
typedef vector_t point;
typedef struct { unsigned char  r, g, b; } color;
typedef struct { float u, v; } texcoord;
//typedef struct { point pos; texcoord tc; color color; float rhw; } vertex;
typedef struct { vector_t pos; texcoord tc;}vertex;
typedef struct { float m[4][4]; };



void paint();
void drawpixel(int x, int y, int r, int g, int b);
void drawline(int x1, int y1, int x2, int y2, int r, int g, int b);

typedef unsigned int IUINT32;

//=====================================================================
// 数学库：此部分应该不用详解，熟悉 D3D 矩阵变换即可
//=====================================================================
typedef struct { float m[4][4]; } matrix_t;
typedef vector_t point_t;

int CMID(int x, int min, int max) { return (x < min) ? min : ((x > max) ? max : x); }

// 计算插值：t 为 [0, 1] 之间的数值
float interp(float x1, float x2, float t) { return x1 + (x2 - x1) * t; }

// | v |
float vector_length(const vector_t* v) {
	float sq = v->x * v->x + v->y * v->y + v->z * v->z;
	return (float)sqrt(sq);
}

// z = x + y
void vector_add(vector_t* z, const vector_t* x, const vector_t* y) {
	z->x = x->x + y->x;
	z->y = x->y + y->y;
	z->z = x->z + y->z;
	z->w = 1.0;
}

// z = x - y
void vector_sub(vector_t* z, const vector_t* x, const vector_t* y) {
	z->x = x->x - y->x;
	z->y = x->y - y->y;
	z->z = x->z - y->z;
	z->w = 1.0;
}

// 矢量点乘
float vector_dotproduct(const vector_t* x, const vector_t* y) {
	return x->x * y->x + x->y * y->y + x->z * y->z;
}

// 矢量叉乘
void vector_crossproduct(vector_t* z, const vector_t* x, const vector_t* y) {
	float m1, m2, m3;
	m1 = x->y * y->z - x->z * y->y;
	m2 = x->z * y->x - x->x * y->z;
	m3 = x->x * y->y - x->y * y->x;
	z->x = m1;
	z->y = m2;
	z->z = m3;
	z->w = 1.0f;
}

// 矢量插值，t取值 [0, 1]
void vector_interp(vector_t* z, const vector_t* x1, const vector_t* x2, float t) {
	z->x = interp(x1->x, x2->x, t);
	z->y = interp(x1->y, x2->y, t);
	z->z = interp(x1->z, x2->z, t);
	z->w = 1.0f;
}

// 矢量归一化
void vector_normalize(vector_t* v) {
	float length = vector_length(v);
	if (length != 0.0f) {
		float inv = 1.0f / length;
		v->x *= inv;
		v->y *= inv;
		v->z *= inv;
	}
}

// c = a + b
void matrix_add(matrix_t* c, const matrix_t* a, const matrix_t* b) {
	int i, j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++)
			c->m[i][j] = a->m[i][j] + b->m[i][j];
	}
}

// c = a - b
void matrix_sub(matrix_t* c, const matrix_t* a, const matrix_t* b) {
	int i, j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++)
			c->m[i][j] = a->m[i][j] - b->m[i][j];
	}
}

// c = a * b
void matrix_mul(matrix_t* c, const matrix_t* a, const matrix_t* b) {
	matrix_t z;
	int i, j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			z.m[j][i] = (a->m[j][0] * b->m[0][i]) +
				(a->m[j][1] * b->m[1][i]) +
				(a->m[j][2] * b->m[2][i]) +
				(a->m[j][3] * b->m[3][i]);
		}
	}
	c[0] = z;
}

// c = a * f
void matrix_scale(matrix_t* c, const matrix_t* a, float f) {
	int i, j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++)
			c->m[i][j] = a->m[i][j] * f;
	}
}

// y = x * m
void matrix_apply(vector_t* y, const vector_t* x, const matrix_t* m) {
	float X = x->x, Y = x->y, Z = x->z, W = x->w;
	y->x = X * m->m[0][0] + Y * m->m[1][0] + Z * m->m[2][0] + W * m->m[3][0];
	y->y = X * m->m[0][1] + Y * m->m[1][1] + Z * m->m[2][1] + W * m->m[3][1];
	y->z = X * m->m[0][2] + Y * m->m[1][2] + Z * m->m[2][2] + W * m->m[3][2];
	y->w = X * m->m[0][3] + Y * m->m[1][3] + Z * m->m[2][3] + W * m->m[3][3];
}

void matrix_set_identity(matrix_t* m) {
	m->m[0][0] = m->m[1][1] = m->m[2][2] = m->m[3][3] = 1.0f;
	m->m[0][1] = m->m[0][2] = m->m[0][3] = 0.0f;
	m->m[1][0] = m->m[1][2] = m->m[1][3] = 0.0f;
	m->m[2][0] = m->m[2][1] = m->m[2][3] = 0.0f;
	m->m[3][0] = m->m[3][1] = m->m[3][2] = 0.0f;
}

void matrix_set_zero(matrix_t* m) {
	m->m[0][0] = m->m[0][1] = m->m[0][2] = m->m[0][3] = 0.0f;
	m->m[1][0] = m->m[1][1] = m->m[1][2] = m->m[1][3] = 0.0f;
	m->m[2][0] = m->m[2][1] = m->m[2][2] = m->m[2][3] = 0.0f;
	m->m[3][0] = m->m[3][1] = m->m[3][2] = m->m[3][3] = 0.0f;
}

// 平移变换
void matrix_set_translate(matrix_t* m, float x, float y, float z) {
	matrix_set_identity(m);
	m->m[3][0] = x;
	m->m[3][1] = y;
	m->m[3][2] = z;
}

// 缩放变换
void matrix_set_scale(matrix_t* m, float x, float y, float z) {
	matrix_set_identity(m);
	m->m[0][0] = x;
	m->m[1][1] = y;
	m->m[2][2] = z;
}

// 旋转矩阵
void matrix_set_rotate(matrix_t* m, float x, float y, float z, float theta) {
	float qsin = (float)sin(theta * 0.5f);
	float qcos = (float)cos(theta * 0.5f);
	vector_t vec = { x, y, z, 1.0f };
	float w = qcos;
	vector_normalize(&vec);
	x = vec.x * qsin;
	y = vec.y * qsin;
	z = vec.z * qsin;
	m->m[0][0] = 1 - 2 * y * y - 2 * z * z;
	m->m[1][0] = 2 * x * y - 2 * w * z;
	m->m[2][0] = 2 * x * z + 2 * w * y;
	m->m[0][1] = 2 * x * y + 2 * w * z;
	m->m[1][1] = 1 - 2 * x * x - 2 * z * z;
	m->m[2][1] = 2 * y * z - 2 * w * x;
	m->m[0][2] = 2 * x * z - 2 * w * y;
	m->m[1][2] = 2 * y * z + 2 * w * x;
	m->m[2][2] = 1 - 2 * x * x - 2 * y * y;
	m->m[0][3] = m->m[1][3] = m->m[2][3] = 0.0f;
	m->m[3][0] = m->m[3][1] = m->m[3][2] = 0.0f;
	m->m[3][3] = 1.0f;
}

// 设置摄像机
void matrix_set_lookat(matrix_t* m, const vector_t* eye, const vector_t* at, const vector_t* up) {
	vector_t xaxis, yaxis, zaxis;

	vector_sub(&zaxis, at, eye);
	vector_normalize(&zaxis);
	vector_crossproduct(&xaxis, up, &zaxis);
	vector_normalize(&xaxis);
	vector_crossproduct(&yaxis, &zaxis, &xaxis);

	m->m[0][0] = xaxis.x;
	m->m[1][0] = xaxis.y;
	m->m[2][0] = xaxis.z;
	m->m[3][0] = -vector_dotproduct(&xaxis, eye);

	m->m[0][1] = yaxis.x;
	m->m[1][1] = yaxis.y;
	m->m[2][1] = yaxis.z;
	m->m[3][1] = -vector_dotproduct(&yaxis, eye);

	m->m[0][2] = zaxis.x;
	m->m[1][2] = zaxis.y;
	m->m[2][2] = zaxis.z;
	m->m[3][2] = -vector_dotproduct(&zaxis, eye);

	m->m[0][3] = m->m[1][3] = m->m[2][3] = 0.0f;
	m->m[3][3] = 1.0f;
}

// D3DXMatrixPerspectiveFovLH
void matrix_set_perspective(matrix_t* m, float fovy, float aspect, float zn, float zf) {
	float fax = 1.0f / (float)tan(fovy * 0.5f);
	matrix_set_zero(m);
	m->m[0][0] = (float)(fax / aspect);
	m->m[1][1] = (float)(fax);
	m->m[2][2] = zf / (zf - zn);
	m->m[3][2] = -zn * zf / (zf - zn);
	m->m[2][3] = 1;
}

//=====================================================================
// 坐标变换
//=====================================================================
typedef struct {
	matrix_t world;         // 世界坐标变换
	matrix_t view;          // 摄影机坐标变换
	matrix_t projection;    // 投影变换
	matrix_t transform;     // transform = world * view * projection
	float w, h;             // 屏幕大小
}	transform_t;
// 矩阵更新，计算 transform = world * view * projection
void transform_update(transform_t* ts) {
	matrix_t m;
	matrix_mul(&m, &ts->world, &ts->view);
	matrix_mul(&ts->transform, &m, &ts->projection);
}
// 初始化，设置屏幕长宽
void transform_init(transform_t* ts, int width, int height) {
	float aspect = (float)width / ((float)height);
	matrix_set_identity(&ts->world);
	matrix_set_identity(&ts->view);
	matrix_set_perspective(&ts->projection, 3.1415926f * 0.5f, aspect, 1.0f, 500.0f);
	ts->w = (float)width;
	ts->h = (float)height;
	transform_update(ts);
}

// 将矢量 x 进行 project 
void transform_apply(transform_t* ts, vector_t* y, vector_t* x) {
	matrix_apply(y, x, &ts->transform);
}
// 检查齐次坐标同 cvv 的边界用于视锥裁剪
int transform_check_cvv(const vector_t* v) {
	float w = v->w;
	int check = 0;
	if (v->z < 0.0f) check |= 1;
	if (v->z > w) check |= 2;
	if (v->x < -w) check |= 4;
	if (v->x > w) check |= 8;
	if (v->y < -w) check |= 16;
	if (v->y > w) check |= 32;
	return check;
}

// 归一化，得到屏幕坐标
void transform_homogenize(const transform_t* ts, vector_t* y, const vector_t* x) {
	float rhw = 1.0f / x->w;
	y->x = (x->x * rhw + 1.0f) * ts->w * 0.5f;
	y->y = (1.0f - x->y * rhw) * ts->h * 0.5f;
	y->z = x->z * rhw;
	y->w = 1.0f;
}
//=====================================================================
// 渲染设备
//=====================================================================
typedef struct {
	transform_t transform;      // 坐标变换器
	int width;                  // 窗口宽度
	int height;                 // 窗口高度
}	device_t;
void device_init(device_t* device, int width, int height)
{
	transform_init(&device->transform, width, height);
}
//set camera
void camera_at_zero(device_t* device, float x, float y, float z) {
	point_t eye = { x, y, z, 1 }, at = { 0, 0, 0, 1 }, up = { 0, 0, 1, 1 };
	matrix_set_lookat(&device->transform.view, &eye, &at, &up);
	transform_update(&device->transform);
}




/////////////////////////////////////////////////////////////////////
//   纹理
////////////////////////////////////////////////////////////////////
float min_u, min_v, max_u, max_v;
int min_x, max_x,min_y,max_y;
unsigned char* buf= nullptr;
int tex_width, tex_height;
void tex_init()
{
	ifstream fin("C:\\Users\\Administrator\\Desktop\\tex.bmp", ios::binary);
	BITMAPFILEHEADER bf;
	BITMAPINFOHEADER bi;
	//unsigned char* buf;
	fin.read((char*)& bf, sizeof(BITMAPFILEHEADER));
	fin.read((char*)& bi, sizeof(BITMAPINFOHEADER));
	tex_width = bi.biWidth;
	tex_height = bi.biHeight;
	buf = (unsigned char*)malloc(bi.biWidth * bi.biHeight * 3);
	fin.seekg(54, ios::beg);
	fin.read((char*)buf, bi.biWidth * bi.biHeight * 3);
	fin.close();
}
/////////////////////////////////////////////////////////////////////
//   深度缓存
////////////////////////////////////////////////////////////////////
float* zbuf = nullptr;
void zbuf_init(int w, int h)
{
	zbuf = (float*)malloc(w * h*sizeof(float));
	memset(zbuf,0, h * w*sizeof(float));
}





//=====================================================================
// Win32 窗口及图形绘制：为 device 提供一个 DibSection 的 FB
//=====================================================================
int screen_w, screen_h, screen_exit = 0;
int screen_mx = 0, screen_my = 0, screen_mb = 0;
int screen_keys[512];	// 当前键盘按下状态
static HWND screen_handle = NULL;		// 主窗口 HWND
static HDC screen_dc = NULL;			// 配套的 HDC
static HBITMAP screen_hb = NULL;		// DIB
static HBITMAP screen_ob = NULL;		// 老的 BITMAP
unsigned char* screen_fb = NULL;		// frame buffer
long screen_pitch = 0;

int screen_init(int w, int h, const char* title);	// 屏幕初始化
int screen_close(void);								// 关闭屏幕
void screen_dispatch(void);							// 处理消息
void screen_update(void);							// 显示 FrameBuffer

// win32 event handler
static LRESULT screen_events(HWND, UINT, WPARAM, LPARAM);

#ifdef _MSC_VER
#pragma comment(lib, "gdi32.lib")
#pragma comment(lib, "user32.lib")
#endif

// 初始化窗口并设置标题
int screen_init(int w, int h, const char* title) {
	WNDCLASSA wc = { CS_BYTEALIGNCLIENT, (WNDPROC)screen_events, 0, 0, 0,
		NULL, NULL, NULL, NULL, "SCREEN3.1415926" };
	BITMAPINFO bi = { { sizeof(BITMAPINFOHEADER), w, -h, 1, 32, BI_RGB,
		(DWORD)w * h * 4, 0, 0, 0, 0 } };
	RECT rect = { 0, 0, w, h };
	int wx, wy, sx, sy;
	LPVOID ptr;
	HDC hDC;

	screen_close();

	wc.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wc.hInstance = GetModuleHandle(NULL);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	if (!RegisterClassA(&wc)) return -1;

	screen_handle = CreateWindowA("SCREEN3.1415926", title,
		WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX,
		0, 0, 0, 0, NULL, NULL, wc.hInstance, NULL);
	if (screen_handle == NULL) return -2;

	screen_exit = 0;
	hDC = GetDC(screen_handle);
	screen_dc = CreateCompatibleDC(hDC);
	ReleaseDC(screen_handle, hDC);

	screen_hb = CreateDIBSection(screen_dc, &bi, DIB_RGB_COLORS, &ptr, 0, 0);
	if (screen_hb == NULL) return -3;

	screen_ob = (HBITMAP)SelectObject(screen_dc, screen_hb);
	screen_fb = (unsigned char*)ptr;
	screen_w = w;
	screen_h = h;
	screen_pitch = w * 4;

	AdjustWindowRect(&rect, GetWindowLong(screen_handle, GWL_STYLE), 0);
	wx = rect.right - rect.left;
	wy = rect.bottom - rect.top;
	sx = (GetSystemMetrics(SM_CXSCREEN) - wx) / 2;
	sy = (GetSystemMetrics(SM_CYSCREEN) - wy) / 2;
	if (sy < 0) sy = 0;
	SetWindowPos(screen_handle, NULL, sx, sy, wx, wy, (SWP_NOCOPYBITS | SWP_NOZORDER | SWP_SHOWWINDOW));
	SetForegroundWindow(screen_handle);

	ShowWindow(screen_handle, SW_NORMAL);
	screen_dispatch();

	memset(screen_keys, 0, sizeof(int) * 512);
	memset(screen_fb, 0, w * h * 4);

	return 0;
}

int screen_close(void) {
	if (screen_dc) {
		if (screen_ob) {
			SelectObject(screen_dc, screen_ob);
			screen_ob = NULL;
		}
		DeleteDC(screen_dc);
		screen_dc = NULL;
	}
	if (screen_hb) {
		DeleteObject(screen_hb);
		screen_hb = NULL;
	}
	if (screen_handle) {
		CloseWindow(screen_handle);
		screen_handle = NULL;
	}
	return 0;
}

static LRESULT screen_events(HWND hWnd, UINT msg,
	WPARAM wParam, LPARAM lParam) {
	switch (msg) {
	case WM_CLOSE: screen_exit = 1; break;
	case WM_KEYDOWN: screen_keys[wParam & 511] = 1; break;
	case WM_KEYUP: screen_keys[wParam & 511] = 0; break;
	default: return DefWindowProc(hWnd, msg, wParam, lParam);
	}
	return 0;
}

void screen_dispatch(void) {
	MSG msg;
	while (1) {
		if (!PeekMessage(&msg, NULL, 0, 0, PM_NOREMOVE)) break;
		if (!GetMessage(&msg, NULL, 0, 0)) break;
		DispatchMessage(&msg);
	}
}

void screen_update(void) {
	HDC hDC = GetDC(screen_handle);
	BitBlt(hDC, 0, 0, screen_w, screen_h, screen_dc, 0, 0, SRCCOPY);
	ReleaseDC(screen_handle, hDC);
	screen_dispatch();
}


//=====================================================================
// 主程序
//=====================================================================
////////////////////////////////////////////////////////////////////////
vertex mesh[8] = {
	 {  1, -1,  1, 1 },
	 { -1, -1,  1, 1 },
	 { -1,  1,  1, 1 },
	 {  1,  1,  1, 1 },
	 {  1, -1, -1, 1 },
	 { -1, -1, -1, 1 },
	 { -1,  1, -1, 1 },
	 {  1,  1, -1, 1 }
};
vertex p1{ {0,0,0,1},{0,0} };
vertex p2{ {0,0,0,1},{0,0} };
vertex p3{ {0,0,0,1},{0,0} };
void clear()
{
	memset(screen_fb, 177, 800 * 600 * 4);
	memset(zbuf, 0, 800 * 600 * sizeof(float));
}
inline float Cross(point p1, point p2)
{
	return p1.x * p2.y - p1.y * p2.x;
}
inline bool IsSameSide(point A,point B,point C,int x,int y)
{
	point PA{ A.x - x, A.y - y, 0,0 };
	point PB{ B.x - B.x, y - y, 0,0 };
	point PC{ C.x - x,C.y - y, 0,0 };

	float f1 = Cross(PA, PB);
	float f2 = Cross(PB, PC);
	float f3 = Cross(PC, PA);
	return (f1 * f2 >= 0.0f)&&(f2 * f3 >= 0.0f)&&((f1 * f3 >= 0.0f));
}
bool insidetriangle(int x, int y)
{
	point PA{ p1.pos.x - x, p1.pos.y - y, 0,0 };
	point PB{ p2.pos.x - x, p2.pos.y - y, 0,0 };
	point PC{ p3.pos.x - x,p3.pos.y - y, 0,0 };
	float f1 = Cross(PA, PB);
	float f2 = Cross(PB, PC);
	float f3 = Cross(PC, PA);
	return (f1 * f2 >= 0.0f) && (f2 * f3 >= 0.0f) && ((f1 * f3 >= 0.0f));
}

color getcolor(int x, int y)
{
	color c;
	float u, v;
	u = min_u + ((x - min_x) * 1.0f / (max_x - min_x)) * (max_u - min_u);// cout << u << endl;
	v = min_v + ((y - min_y) * 1.0f / (max_y - min_y)) * (max_v - min_v); //cout << v << endl;
	u = u > 1 ? 1 : u = u; u < 0 ? 0 : u; v = v > 1 ? 1 : v; v = v < 0 ? 0 : v;
	if (u < 0 || u>1 || v < 0 || v>1)
	{
		cout << "u:" << u << endl;
		cout << "v:" << v << endl;
	}

	c.b = *(buf + (tex_width * (int)(v * tex_height) + (int)(u * tex_width)) * 3);
	c.g = *(buf + (tex_width * (int)(v * tex_height) + (int)(u * tex_width)) * 3 + 1);
	c.r = *(buf + (tex_width * (int)(v * tex_height) + (int)(u * tex_width)) * 3 + 2);
	return c;
}


/*
color getcolor(int x, int y)
{
	color c;
	float u, v;

	float pp1, pp2, pp3,pp;
	pp1 = sqrt(pow(p1.pos.x - x, 2) + pow(p1.pos.y - y, 2));
	pp2 = sqrt(pow(p2.pos.x - x, 2) + pow(p2.pos.y - y, 2));
	pp3 = sqrt(pow(p3.pos.x - x, 2) + pow(p3.pos.y - y, 2));
	pp = pp1 + pp2 + pp3;
	u = p1.tc.u * (pp-pp1) / pp/2 + p2.tc.u * (pp-pp2) / pp/2 + p3.tc.u * (pp-pp3) / pp/2;
	v = p1.tc.v * (pp - pp1) / pp/2 + p2.tc.v * (pp - pp2) / pp/2 + p3.tc.v * (pp - pp3) / pp/2;
	if (u > 1 || u < 0)cout << u;
	if (v > 1 || v < 0)cout << v;




	c.b = *(buf + (tex_width * (int)(v * tex_height) + (int)(u * tex_width)) * 3);
	c.g = *(buf + (tex_width * (int)(v * tex_height) + (int)(u * tex_width)) * 3 + 1);
	c.r = *(buf + (tex_width * (int)(v * tex_height) + (int)(u * tex_width)) * 3 + 2);
	return c;
}*/
void drawpixel(int x, int y,float z)
{
	if (z > zbuf[y * Width + x]) {
		//cout << "new" << z  << endl;
		//cout << "old" << zbuf[y * Width + x] << endl;
		//return; 
	}
	//else
	{
		color c = getcolor(x, y);
		screen_fb[(y * Width + x) * 4] = c.b;
		screen_fb[(y * Width + x) * 4 + 1] = c.g;
		screen_fb[(y * Width + x) * 4 + 2] = c.r;
		zbuf[y * Width + x] = z;
	}
	
	if (insidetriangle(++x, y))drawpixel(x, y, z);//修改填充不用计算v
}
void drawline(vector_t&p1, vector_t&p2,float z)
{
	int x1 = p1.x, x2 = p2.x, y1 = p1.y, y2 = p2.y;
	int x, y, rem = 0;
	if (x1 == x2 && y1 == y2) {
		drawpixel( x1, y1,z);
	}
	else if (x1 == x2) {
		int inc = (y1 <= y2) ? 1 : -1;
		for (y = y1; y != y2; y += inc) drawpixel(x1, y, z);
		drawpixel( x2, y2, z);
	}
	else if (y1 == y2) {
		int inc = (x1 <= x2) ? 1 : -1;
		for (x = x1; x != x2; x += inc)drawpixel(x, y1, z);
		drawpixel( x2, y2, z);
	}
	else {
		int dx = (x1 < x2) ? x2 - x1 : x1 - x2;
		int dy = (y1 < y2) ? y2 - y1 : y1 - y2;
		if (dx >= dy) {
			if (x2 < x1) x = x1, y = y1, x1 = x2, y1 = y2, x2 = x, y2 = y;
			for (x = x1, y = y1; x <= x2; x++) {
				drawpixel(x, y, z);
				rem += dy;
				if (rem >= dx) {
					rem -= dx;
					y += (y2 >= y1) ? 1 : -1;
					drawpixel( x, y, z);
				}
			}
			drawpixel( x2, y2, z);
		}
		else {
			if (y2 < y1) x = x1, y = y1, x1 = x2, y1 = y2, x2 = x, y2 = y;
			for (x = x1, y = y1; y <= y2; y++) {
				drawpixel( x, y, z);
				rem += dx;
				if (rem >= dy) {
					rem -= dy;
					x += (x2 >= x1) ? 1 : -1;
					drawpixel( x, y, z);
				}
			}
			drawpixel(x2, y2, z);
		}
	}
}
void drawtriangle(device_t* device)
{
	vector_t tp1, tp2, tp3, c1, c2, c3;


	transform_apply(&device->transform, &c1, &p1.pos);
	transform_apply(&device->transform, &c2, &p2.pos);
	transform_apply(&device->transform, &c3, &p3.pos);



	//裁剪判断


	// 归一化
	transform_homogenize(&device->transform, &tp1, &c1);
	transform_homogenize(&device->transform, &tp2, &c2);
	transform_homogenize(&device->transform, &tp3, &c3);

	//准备纹理插值

	
	min_u = min(p1.tc.u, min(p2.tc.u, p3.tc.u));
	max_u = max(p1.tc.u, max(p2.tc.u, p3.tc.u));
	//????
	min_v = min(p1.tc.v, min(p2.tc.v, p3.tc.v));
	max_v = max(p1.tc.v, max(p2.tc.v, p3.tc.v));
	
	min_x = min(tp1.x, min(tp2.x, tp3.x));
	max_x = max(tp1.x, max(tp2.x, tp3.x));
	min_y = min(tp1.y, min(tp2.y, tp3.y));
	max_y = max(tp1.y, max(tp2.y, tp3.y));
	if (min_x == max_x || min_y == max_y)return;
	
	p1.pos = tp1;
	p2.pos = tp2;
	p3.pos = tp3;
	float z =1- max(p1.pos.z, max(p2.pos.z, p3.pos.z));

	drawline(tp1, tp2,z);
	drawline(tp2, tp3,z);
	drawline(tp3, tp1,z);
}
vertex cube[8] = {
	{{-1,1,-1,1},{0,0}},//0
	{{1,1,-1,1},{1,0}},//1
	{{1,-1,-1,1},{1,1}},//2
	{{-1,-1,-1,1},{0,1}},//3
	{{-1,1,1,1},{0,0}},//4
	{{1,1,1,1},{1,0}},//5
	{{1,-1,1,1},{0,1}},//6
	{{-1,-1,1,1},{1,1}}//7

};
void drawplane(device_t* ts,int i1,int i2,int i3,int i4)
{
	p1 = cube[i1];
	p2 = cube[i2];
	p3 = cube[i3];
	p1.tc.u = 0;
	p1.tc.v = 0;
	p2.tc.u = 1;
	p2.tc.v = 0;
	p3.tc.u = 1;
	p3.tc.v = 1;
	drawtriangle(ts);
	p1 = cube[i1];
	p2 = cube[i3];
	p3 = cube[i4];
	p1.tc.u = 0;
	p1.tc.v = 0;
	p2.tc.u = 1;
	p2.tc.v = 1;
	p3.tc.u = 0;
	p3.tc.v = 1;
	drawtriangle(ts);

}
void drawcube(device_t* ts,float theta)
{
	matrix_t m;
	matrix_set_rotate(&m, -1, -0.5, 1, theta);
	ts->transform.world = m;
	transform_update(&ts->transform);

	drawplane(ts,0, 1, 2, 3);
	drawplane(ts, 1, 5, 6, 2);
	drawplane(ts, 5, 4, 7, 6);
	drawplane(ts, 4, 0, 3, 7);
	drawplane(ts, 3, 2, 6, 7);
	drawplane(ts, 1, 0, 4, 5);
}

int main(void)
{
	device_t device;
	float alpha = 1;
	const char* title = "Mini3d (software render tutorial) - Left/Right: rotation, Up/Down: forward/backward, Space: switch state";
	if (screen_init(800, 600, title))
		return -1;
	device_init(&device, 800, 600);
	zbuf_init(800, 600);
	camera_at_zero(&device, 0, 4, 0);
	tex_init();
	while (screen_exit == 0 && screen_keys[VK_ESCAPE] == 0) {
		clear();
		screen_dispatch();

		if (screen_keys[VK_UP]);
		if (screen_keys[VK_DOWN]);
		if (screen_keys[VK_LEFT])alpha -= 0.01f;
		if (screen_keys[VK_RIGHT])alpha += 0.01f;
		if (screen_keys[VK_SPACE]);
		drawcube(&device,alpha);
		screen_update();
		Sleep(1);
	}
	return 0;
}

