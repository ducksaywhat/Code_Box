package fun;
import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.Timer;
import java.util.*;
import java.awt.geom.*;
import javax.swing.border.*;
public class fun
{
	public static void main(String args[])
	{
		EventQueue.invokeLater(new Runnable()
		{
	public void run()
	{
		JFrame text=new frame();
		text.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		text.setTitle("Text");
		text.setVisible(true);
		text.setSize(1200,700);
		text.setResizable(false);
	}		
		});
	}
}
class frame extends JFrame
{
	JPanel panel=new JPanel();
	JPanel panel1=new JPanel();
	JPanel panel2=new JPanel();
	JPanel buttonpanel=new JPanel();
	public frame()
	{
		Border a=BorderFactory.createMatteBorder(15, 15, 15, 15,Color.PINK);
		//Border b=BorderFactory.createTitledBorder(a,"A title");
		JButton Abutton=new JButton("A");
		JButton Bbutton=new JButton("B");
		JButton Cbutton=new JButton("C");
		JButton Dbutton=new JButton("D");
		JButton Ebutton=new JButton("E");
		JButton Fbutton=new JButton("F");
		panel.setLayout(new BorderLayout());
        setLayout(new BorderLayout());
        panel.add(Abutton,BorderLayout.NORTH);
        panel.add(Bbutton,BorderLayout.SOUTH);
        panel.add(Cbutton,BorderLayout.WEST);
        panel.add(Dbutton,BorderLayout.EAST);
        panel.add(Ebutton);
        //panel.setPreferredSize(new Dimension(1200,300));//OK there
        add(panel,BorderLayout.NORTH);
        //textarea
        JTextArea textarea=new JTextArea(10,20);
        JScrollPane scrollPane=new JScrollPane(textarea);
        //textarea.setLineWrap(true);
        //add(scrollPane,BorderLayout.CENTER);
        //panel1.add(textarea);
        //panel1.add(scrollPane);
        ButtonGroup group=new ButtonGroup();
        JRadioButton button1=new JRadioButton("no.1",true);
        JRadioButton button2=new JRadioButton("no.2");
        JRadioButton button3=new JRadioButton("no.3");
        JRadioButton button4=new JRadioButton("no.4");
        button1.addActionListener(new ActionListener()
        		{
        	public void actionPerformed(ActionEvent event)
        	{
        		panel1.setBorder(a);
        	}
        		});
        //group.add(button4);if one group have only one button the button once have been choice ,it would never change
        group.add(button3);
        group.add(button2);
        group.add(button1);
        panel1.add(button4);
        panel1.add(button3);
        panel1.add(button2);
        panel1.add(button1);
        panel1.setBorder(a);
        panel.setPreferredSize(new Dimension(1200,300));
        JComboBox<String>faceCombo=new JComboBox<>();
        faceCombo.addItem("no.1");
        faceCombo.addItem("no.2");
        faceCombo.addItem("no.3");
        faceCombo.addItem("no.4");
        faceCombo.addItem("no.4");
        ChangeListener listener=new ChangeListener()
		{
	public void stateChanged(ChangeEvent event)
	{
		JSlider source=(JSlider)event.getSource();
		panel1.setBorder(BorderFactory.createMatteBorder(15, 15, 15, 15,new Color(source.getValue(),120,170)));
		
	}
	
		};
		UIManager.LookAndFeelInfo[] infos=UIManager.getInstalledLookAndFeels();
		for(UIManager.LookAndFeelInfo info:infos)
			makebutton(info.getName(),info.getClassName());
		panel1.add(buttonpanel);
        JSlider slider =new JSlider(0,200,50);
        slider.addChangeListener(listener);
        panel1.add(slider);
        slider.setMajorTickSpacing(20);
        slider.setMinorTickSpacing(5);
        slider.setPaintTicks(true);
        //slider.setSnapToTicks(true);
        //slider.setPaintLabels(true);
        //faceCombo.setEditable(true);
        panel1.add(faceCombo);
        add(panel1);
        //panel2.add(Fbutton);
        //Fbutton.setPreferredSize(new Dimension(60,60));
        panel2.setLayout(null);
        Fbutton.setBounds(100, 100, 50, 50);//相对于自己！！！
        Fbutton.setContentAreaFilled(false);//透明
        Fbutton.setBorderPainted(false);//边框
        /*
         * Java ( Eclipse )环境下， Button 样式问题解释如下：
在jframe中的button样式是不可以随意改变的设置好了就是固定的样式。
样式设置如下：
1、对JButton大小的设置 
因为JButen是属于小器件类型的，所以一般的setSize不能对其惊醒大小的设置，所以一般我们用
button.setPreferredSize(new Dimension(30,30)); //（30，30）  是你要设置按钮的大小 
2、对JButton透明的设置 
按钮设置为透明，这样就不会挡着后面的背景 
button.setContentAreaFilled(false); 
3、对JButton去掉按钮的边框的设置 
如果有时候你的按钮不需要边框因为边框影响美观或者是因为你需要的是点击之前按钮呈现 普通图标形式，点击之后才有各种效果的话就可以用这种方法去掉边框 
button.setBorderPainted(false); 
4、对JButton添加图标呢的设置 // 实例化一个图标对象 
ImageIcon image = new ImageIcon(icons[i]); // 实例化按钮对象，并且设置按钮上显示图片 
JButton button = new JButton(image); ――或者 
button.setIcon(new ImageIcon(getClass().getResource("qq.png"))); //qq.png是你要添加的图片 
5、让按钮随按钮上的图案变化 butten.setMargin(new Insets(0,0,0,0)); 
6、设置凸起来的按钮，很多其他的swing也可用此方法 
butten.setBorder(BorderFactory.createRaisedBevelBorder()); 
7、设置凹起来的按钮，很多其他的swing也可用此方法 
   button.setBorder(BorderFactory.createLoweredBevelBorder());  
8、设置按钮的前景色和背景色 
   button .setFont(new  java.awt.Font("华文行楷",  1,  15)); 
   button.setBackground(Color.green); 
9、改变按钮的样式 
 UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel"); 
JFrame可以理解成一个容器，既然是容器就可以装东西。JButton就属于容器里面的东西，比如说是鱼。如果鱼离开了水，是无法生存的，这就可以类比JButtion必须放到JFrame上面才能进行添加。
JAVA Swing中JFrame代表容易，JPane代表面板或者画布，可以在上面添加按钮、对话框、输入框等。
         */
        panel2.add(Fbutton);
        panel2.setPreferredSize(new Dimension(200,300));
        add(panel2,BorderLayout.WEST);
        Toolkit tk=Toolkit.getDefaultToolkit();
        Image img=tk.getImage("bling.png");
        Cursor dynamiteCusor=tk.createCustomCursor(img, new Point(10,10 ), "name");
        panel1.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        panel.setCursor(dynamiteCusor);
        //panel2.setCursor(Cursor.getPredefinedCursor());
 
        pack();
		
	}
	public void makebutton(String name,String plafName)
	{
		JButton button=new JButton(name);
		buttonpanel.add(button);
		button.addActionListener(new ActionListener()
				{
			public void actionPerformed(ActionEvent event)
			{
				try
				{
					UIManager.setLookAndFeel(plafName);
					SwingUtilities.updateComponentTreeUI(frame.this);//当你改变程序的LookAndFeel外观时，通过调用这个方法来刷新整个UI
					//Java DOC中的描述是
					//简单的外观更改：将树结构中的每个节点转到 updateUI() -- 也就是说，通过当前外观初始化其 UI 属性。
					//pack();
					
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
				
			}
				});
		
	}
	
}