#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>
#include <iostream>
#include<fstream>
#include <windows.h>
using namespace std;

const int Width=  800;
const int Height=  600;
typedef unsigned int IUINT32;

typedef struct { float x, y, z ,w; } point;
typedef struct { unsigned char  r, g, b; } color;
typedef struct { float u, v; } texcoord;
//typedef struct { point pos; texcoord tc; color color; float rhw; } vertex;
typedef struct { point pos; texcoord tc;}vertex;
typedef struct { float m[4][4]; };



void paint();
void drawpixel(int x, int y, int r, int g, int b);
void drawline(int x1, int y1, int x2, int y2, int r, int g, int b);

/////////////////////////////////////////////////////////////////////
//   纹理
////////////////////////////////////////////////////////////////////
float min_u, min_v, max_u, max_v;
int min_x, max_x,min_y,max_y;
unsigned char* buf= nullptr;
int tex_width, tex_height;
void tex_init()
{
	ifstream fin("C:\\Users\\Administrator\\Desktop\\tex.bmp", ios::binary);
	BITMAPFILEHEADER bf;
	BITMAPINFOHEADER bi;
	//unsigned char* buf;
	fin.read((char*)& bf, sizeof(BITMAPFILEHEADER));
	fin.read((char*)& bi, sizeof(BITMAPINFOHEADER));
	buf = (unsigned char*)malloc(bi.biWidth * bi.biHeight * 3);
	tex_width= bi.biWidth;
	tex_height=bi.biHeight;
	fin.seekg(54, ios::beg);
	fin.read((char*)buf, bi.biWidth * bi.biHeight * 3);
	fin.close();
}








//=====================================================================
// Win32 窗口及图形绘制：为 device 提供一个 DibSection 的 FB
//=====================================================================
int screen_w, screen_h, screen_exit = 0;
int screen_mx = 0, screen_my = 0, screen_mb = 0;
int screen_keys[512];	// 当前键盘按下状态
static HWND screen_handle = NULL;		// 主窗口 HWND
static HDC screen_dc = NULL;			// 配套的 HDC
static HBITMAP screen_hb = NULL;		// DIB
static HBITMAP screen_ob = NULL;		// 老的 BITMAP
unsigned char* screen_fb = NULL;		// frame buffer
long screen_pitch = 0;

int screen_init(int w, int h, const char* title);	// 屏幕初始化
int screen_close(void);								// 关闭屏幕
void screen_dispatch(void);							// 处理消息
void screen_update(void);							// 显示 FrameBuffer

// win32 event handler
static LRESULT screen_events(HWND, UINT, WPARAM, LPARAM);

#ifdef _MSC_VER
#pragma comment(lib, "gdi32.lib")
#pragma comment(lib, "user32.lib")
#endif

// 初始化窗口并设置标题
int screen_init(int w, int h, const char* title) {
	WNDCLASSA wc = { CS_BYTEALIGNCLIENT, (WNDPROC)screen_events, 0, 0, 0,
		NULL, NULL, NULL, NULL, "SCREEN3.1415926" };
	BITMAPINFO bi = { { sizeof(BITMAPINFOHEADER), w, -h, 1, 32, BI_RGB,
		(DWORD)w * h * 4, 0, 0, 0, 0 } };
	RECT rect = { 0, 0, w, h };
	int wx, wy, sx, sy;
	LPVOID ptr;
	HDC hDC;

	screen_close();

	wc.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wc.hInstance = GetModuleHandle(NULL);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	if (!RegisterClassA(&wc)) return -1;

	screen_handle = CreateWindowA("SCREEN3.1415926", title,
		WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX,
		0, 0, 0, 0, NULL, NULL, wc.hInstance, NULL);
	if (screen_handle == NULL) return -2;

	screen_exit = 0;
	hDC = GetDC(screen_handle);
	screen_dc = CreateCompatibleDC(hDC);
	ReleaseDC(screen_handle, hDC);

	screen_hb = CreateDIBSection(screen_dc, &bi, DIB_RGB_COLORS, &ptr, 0, 0);
	if (screen_hb == NULL) return -3;

	screen_ob = (HBITMAP)SelectObject(screen_dc, screen_hb);
	screen_fb = (unsigned char*)ptr;
	screen_w = w;
	screen_h = h;
	screen_pitch = w * 4;

	AdjustWindowRect(&rect, GetWindowLong(screen_handle, GWL_STYLE), 0);
	wx = rect.right - rect.left;
	wy = rect.bottom - rect.top;
	sx = (GetSystemMetrics(SM_CXSCREEN) - wx) / 2;
	sy = (GetSystemMetrics(SM_CYSCREEN) - wy) / 2;
	if (sy < 0) sy = 0;
	SetWindowPos(screen_handle, NULL, sx, sy, wx, wy, (SWP_NOCOPYBITS | SWP_NOZORDER | SWP_SHOWWINDOW));
	SetForegroundWindow(screen_handle);

	ShowWindow(screen_handle, SW_NORMAL);
	screen_dispatch();

	memset(screen_keys, 0, sizeof(int) * 512);
	memset(screen_fb, 0, w * h * 4);

	return 0;
}

int screen_close(void) {
	if (screen_dc) {
		if (screen_ob) {
			SelectObject(screen_dc, screen_ob);
			screen_ob = NULL;
		}
		DeleteDC(screen_dc);
		screen_dc = NULL;
	}
	if (screen_hb) {
		DeleteObject(screen_hb);
		screen_hb = NULL;
	}
	if (screen_handle) {
		CloseWindow(screen_handle);
		screen_handle = NULL;
	}
	return 0;
}

static LRESULT screen_events(HWND hWnd, UINT msg,
	WPARAM wParam, LPARAM lParam) {
	switch (msg) {
	case WM_CLOSE: screen_exit = 1; break;
	case WM_KEYDOWN: screen_keys[wParam & 511] = 1; break;
	case WM_KEYUP: screen_keys[wParam & 511] = 0; break;
	default: return DefWindowProc(hWnd, msg, wParam, lParam);
	}
	return 0;
}

void screen_dispatch(void) {
	MSG msg;
	while (1) {
		if (!PeekMessage(&msg, NULL, 0, 0, PM_NOREMOVE)) break;
		if (!GetMessage(&msg, NULL, 0, 0)) break;
		DispatchMessage(&msg);
	}
}

void screen_update(void) {
	HDC hDC = GetDC(screen_handle);
	BitBlt(hDC, 0, 0, screen_w, screen_h, screen_dc, 0, 0, SRCCOPY);
	ReleaseDC(screen_handle, hDC);
	screen_dispatch();
}


//=====================================================================
// 主程序
//=====================================================================
////////////////////////////////////////////////////////////////////////
vertex mesh[8] = {
	 {  1, -1,  1, 1 }, 
	 { -1, -1,  1, 1 }, 
	 { -1,  1,  1, 1 }, 
	 {  1,  1,  1, 1 }, 
	 {  1, -1, -1, 1 }, 
	 { -1, -1, -1, 1 }, 
	 { -1,  1, -1, 1 }, 
	 {  1,  1, -1, 1 }
};
vertex* p1 = new vertex{ {0,0,0,1},{0,0} };
vertex* p2 = new vertex{ {0,0,0,1},{0,0} };
vertex* p3 = new vertex{ {0,0,0,1},{0,0} };
void clear()
{
	memset(screen_fb, 177, 800 * 600 * 4);
}
inline float Cross(point p1, point p2)
{
	return p1.x * p2.y - p1.y * p2.x;
}
inline bool IsSameSide(point A,point B,point C,int x,int y)
{
	point PA{ A.x - x, A.y - y, 0,0 };
	point PB{ B.x - B.x, y - y, 0,0 };
	point PC{ C.x - x,C.y - y, 0,0 };

	float f1 = Cross(PA, PB);
	float f2 = Cross(PB, PC);
	float f3 = Cross(PC, PA);
	return (f1 * f2 >= 0.0f)&&(f2 * f3 >= 0.0f)&&((f1 * f3 >= 0.0f));
}
bool insidetriangle(int x, int y)
{
	point PA{ p1->pos.x - x, p1->pos.y - y, 0,0 };
	point PB{ p2->pos.x - x, p2->pos.y - y, 0,0 };
	point PC{ p3->pos.x - x,p3->pos.y - y, 0,0 };
	float f1 = Cross(PA, PB);
	float f2 = Cross(PB, PC);
	float f3 = Cross(PC, PA);
	return (f1 * f2 >= 0.0f) && (f2 * f3 >= 0.0f) && ((f1 * f3 >= 0.0f));
}
color getcolor(int x,int y)
{
	color c;
	float u, v;
	u = min_u + ((x - min_x)*1.0f / (max_x - min_x)) * (max_u - min_u);// cout << u << endl;
	v = min_v + ((y - min_y)*1.0f / (max_y - min_y)) * (max_v - min_v); //cout << v << endl;
	c.b = *(buf + (int)(tex_width * (v * tex_height) + u * tex_width) * 3);
	c.g = *(buf + (int)(tex_width * (v * tex_height) + u * tex_width) * 3+1);
	c.r = *(buf + (int)(tex_width * (v * tex_height) + u * tex_width) * 3+2);
	return c;
}
void drawpixel(int x, int y)
{
	color c = getcolor(x,y);
	screen_fb[(y * Width + x) * 4] = c.b;
	screen_fb[(y * Width + x) * 4+1] = c.g;
	screen_fb[(y * Width + x) * 4+2] = c.r;
	if(insidetriangle(++x, y))drawpixel(x, y);//修改填充不用计算v
}
void drawline(vertex&p1, vertex&p2)
{
	int x1 = p1.pos.x, x2 = p2.pos.x, y1 = p1.pos.y, y2 = p2.pos.y;
	int x, y, rem = 0;
	if (x1 == x2 && y1 == y2) {
		drawpixel( x1, y1);
	}
	else if (x1 == x2) {
		int inc = (y1 <= y2) ? 1 : -1;
		for (y = y1; y != y2; y += inc) drawpixel(x1, y);
		drawpixel( x2, y2);
	}
	else if (y1 == y2) {
		int inc = (x1 <= x2) ? 1 : -1;
		for (x = x1; x != x2; x += inc)drawpixel(x, y1);
		drawpixel( x2, y2);
	}
	else {
		int dx = (x1 < x2) ? x2 - x1 : x1 - x2;
		int dy = (y1 < y2) ? y2 - y1 : y1 - y2;
		if (dx >= dy) {
			if (x2 < x1) x = x1, y = y1, x1 = x2, y1 = y2, x2 = x, y2 = y;
			for (x = x1, y = y1; x <= x2; x++) {
				drawpixel(x, y);
				rem += dy;
				if (rem >= dx) {
					rem -= dx;
					y += (y2 >= y1) ? 1 : -1;
					drawpixel( x, y);
				}
			}
			drawpixel( x2, y2);
		}
		else {
			if (y2 < y1) x = x1, y = y1, x1 = x2, y1 = y2, x2 = x, y2 = y;
			for (x = x1, y = y1; y <= y2; y++) {
				drawpixel( x, y);
				rem += dx;
				if (rem >= dy) {
					rem -= dy;
					x += (x2 >= x1) ? 1 : -1;
					drawpixel( x, y);
				}
			}
			drawpixel(x2, y2);
		}
	}
}
void drawtriangle()
{
	//准备纹理插值
	min_u = min(p1->tc.u, min(p2->tc.u, p3->tc.u)); cout << min_u << endl;
	max_u = max(p1->tc.u, max(p2->tc.u, p3->tc.u)); cout << max_u << endl;
	//????
	min_v = min(p1->tc.v, min(p2->tc.v, p3->tc.v)); cout << min_v << endl;
	max_v = max(p1->tc.v, max(p2->tc.v, p3->tc.v)); cout << max_v << endl;
	
	min_x = min(p1->pos.x, min(p2->pos.x, p3->pos.x)); cout << min_x << endl;
	max_x = max(p1->pos.x, max(p2->pos.x, p3->pos.x)); cout << max_x << endl;
	min_y = min(p1->pos.y, min(p2->pos.y, p3->pos.y)); cout << min_y << endl;
	max_y = max(p1->pos.y, max(p2->pos.y, p3->pos.y)); cout << max_y << endl;

	drawline(*p1, *p2);
	drawline(*p2, *p3);
	drawline(*p3, *p1);
}
void paint()
{
	clear();
	free(p1);
	free(p2);
	free(p3);
	p1 = new vertex{ {200,100,0,1},{0,0} };
	p2 = new vertex{ {600,100,0,1},{1,0} };
	p3 = new vertex{ {600,500,0,1},{1,1} };
	drawtriangle();
	free(p1);
	free(p2);
	free(p3);
	p1 = new vertex{ {200,100,0,1},{0,0} };
	p2 = new vertex{ {600,500,0,1},{1,1} };
	p3 = new vertex{ {200,500,0,1},{0,1} };
	drawtriangle();

}
int main(void)
{
	const char* title = "Mini3d (software render tutorial) - Left/Right: rotation, Up/Down: forward/backward, Space: switch state";
	if (screen_init(800, 600, title))
		return -1;
	tex_init();
	while (screen_exit == 0 && screen_keys[VK_ESCAPE] == 0) {
		screen_dispatch();

		if (screen_keys[VK_UP]);
		if (screen_keys[VK_DOWN]);
		if (screen_keys[VK_LEFT]);
		if (screen_keys[VK_RIGHT]);
		if (screen_keys[VK_SPACE]);
		//clear();
		//drawline(50,60,150,80, 0, 180,0);
		paint();
		screen_update();
		Sleep(1000000000000);
	}
	return 0;
}

